#!/bin/bash

##
#
# receive statusinfo of switches from lancom, mikrotik, or netgear
#
# you can get all snmp-options with:
#	snmpwalk -m ALL -v 2c -c MYCOMMUNITY MYIPADDRESS  .1.3.6.1.2.1
#
#
# Usage:
#	./check_switch -h IP-ADDRESS -c SNMP-COMMUNITY -s STATUSCHECK
#
#
# 2023-02-20:  Version 1.6	\\ Pit Wenkin
#
##

SYSUPTIME=0
SYSCONTACT=''
SYSNAME=''
SYSLOCATION=''


SNMPVersion="2c"
SNMPCommunity="public"
SNMPTimeout="10"
SNMPPort="161"


#OID declarations
OID_SYSDESCRIPTION="1.3.6.1.2.1.1.1.0"
OID_SYSOBJECTID="1.3.6.1.2.1.1.2.0"
OID_SYSUPTIME="1.3.6.1.2.1.1.3.0"
OID_SYSCONTACT="1.3.6.1.2.1.1.4.0"
OID_SYSNAME="1.3.6.1.2.1.1.5.0"
OID_SYSLOCATION="1.3.6.1.2.1.1.6.0"
OID_SYSSERVICES="1.3.6.1.2.1.1.7.0"

OID_IFOPERSTATUS=".1.3.6.1.2.1.2.2.1.8"
OID_IFLASTCHANGE=".1.3.6.1.2.1.2.2.1.9"

# nagios return values
export STATE_OK=0
export STATE_WARNING=1
export STATE_CRITICAL=2
export STATE_UNKNOWN=3
export STATE_DEPENDENT=4

intReturn=$STATE_OK

usage()
{
	echo "usage: ./check_switch -h [hostname] -c [community] -s [status]"
	echo "options:"
	echo "	-h [snmp hostname]	Hostname"
	echo "	-c [community name]	community name (ex: public)"
	echo "	-p [snmp port]          port for snmp request (default: 161)"
	echo "	-P [port]		port(s) to check, seperated by ','"
	echo "	-n [number of ports]	number of physical ports on device"
	echo "	-o [options]		additional options"
	echo "	   d				only ports that are down (or anything except up)"
	echo "	   u				only ports that are up"
	echo "	-s [check]		Check to be executed"
	echo "	   info				System infos"
	echo "	   port				Check status of specific port ('P' option)"
	echo "	   ports			Listing of ports ('n' option defines number of port to check)"
	echo "	   uptime			System uptime"
	echo "	-t [timeout]		duration before doing an timeout in seconds - default 10s"
	echo ""
	echo "examples:	./check_switch -h 1.2.3.4 -c public -s info"
	echo "		./check_switch -h 1.2.3.4 -p 4321 -c public -s uptime -t 30"
	echo "		./check_switch -h 1.2.3.4 -c public -s ports -n 28"
	echo "		./check_switch -h 1.2.3.4 -c public -s port -P 1"
	exit 3
}

if [ "$1" == "--help" ]; then
	usage; exit 0
fi

while getopts c:h:n:o:p:P:s:t: OPTNAME; do
	case "$OPTNAME" in
	h)	hostname="$OPTARG";;
	c)	SNMPCommunity="$OPTARG";;
	o)	options="$OPTARG";;
	n)	ports="$OPTARG";;
	p)	SNMPPort="$OPTARG";;
	P)	port="$OPTARG";;
	s)	status="$OPTARG";;
	t)	SNMPTimeout="$OPTARG";;
	esac
done

function up_time {
	time=$1
	pre=$2
	suf=$3
	up=$4
	#returns uptime as human readable string
	if [[ $time =~ (.*):(.*):(.*):(.*)\.(.*) ]]; then
		DAYS=${BASH_REMATCH[1]}
		HOURS=${BASH_REMATCH[2]}
		MINUTES=${BASH_REMATCH[3]}
		SECONDS=${BASH_REMATCH[4]}
		MILLISECONDS=${BASH_REMATCH[5]}

		output=$output"$pre$DAYS days $HOURS hours $MINUTES minutes$suf"
		if [ $DAYS == "0" ] && [ $HOURS == "0" ] && [ $MINUTES -lt "5" ]; then
			intReturn=$STATE_CRITICAL
			if [ "$up" != '' ]; then
				output=$up"$pre$DAYS days $HOURS hours $MINUTES minutes$suf"$output
			fi
		else
			if [ $intReturn -lt $STATE_CRITICAL ] && [ $DAYS == "0" ] && [ $HOURS == "0" ] && [ $MINUTES -lt "15" ]; then
				intReturn=$STATE_WARNING
				if [ "$up" != '' ]; then
					output=$up"$pre$DAYS days $HOURS hours $MINUTES minutes$suf"$output
				fi
			fi
		fi
	fi
}

function get_timestamp {
	t=$1
	if [[ $t =~ (.*):(.*):(.*):(.*)\.(.*) ]]; then
		DAYS=${BASH_REMATCH[1]}
		HOURS=${BASH_REMATCH[2]}
		MINUTES=${BASH_REMATCH[3]}
		SECONDS=${BASH_REMATCH[4]}
		MILLISECONDS=${BASH_REMATCH[5]}
		
		ALL=$((10#$DAYS*24*60*60*1000 + 10#$HOURS*60*60*1000 + 10#$MINUTES*60*1000 + 10#$SECONDS*1000 + 10#$MILLISECONDS))
		echo $ALL
	fi
	
}

function sub_time {
	t1=$1
	t2=$2;
	#substracts one uptime from another
	T1ALL=$(get_timestamp $t1)
	T2ALL=$(get_timestamp $t2)
	if [[ T1ALL != '' && T2ALL != '' ]]; then
		TS=$((T1ALL - T2ALL))
		DAYS=$(($TS/(24*60*60*1000)))
		TS=$(($TS-($DAYS*24*60*60*1000)))
		HOURS=$(($TS/(60*60*1000)))
		TS=$(($TS-($HOURS*60*60*1000)))
		MINUTES=$(($TS/(60*1000)))
		TS=$(($TS-($MINUTES*60*1000)))
		SECONDS=$(($TS/(1000)))
		MILLSECONDS=$(($TS-$SECONDS))
		echo "$DAYS:$HOURS:$MINUTES:$SECONDS.$MILLISECONDS"
	else
		echo 'ERROR'
	fi
}


if [ "$hostname" = "" ] || [ "$SNMPCommunity" = "" ] ; then
	usage
else
	SNMPArgs=" -OQne -v $SNMPVersion -c $SNMPCommunity -t $SNMPTimeout $hostname:$SNMPPort"

	case "$status" in

		info)
			info=`snmpget $SNMPArgs $OID_SYSDESCRIPTION $OID_SYSUPTIME $OID_SYSCONTACT $OID_SYSNAME $OID_SYSLOCATION 2> /dev/null`
			if [ "$?" != "0" ] ; then
				output="CRITICAL - Problem with SNMP request, check user/password/host"
				intReturn=$STATE_CRITICAL ;
			else

				SYSDESCRIPTION=$(echo "$info" | grep $OID_SYSDESCRIPTION | sed 's/.* = //g' | sed 's/"//g')
				SYSUPTIME=$(echo "$info" | grep $OID_SYSUPTIME | sed 's/.* = //g' | sed 's/"//g')
				SYSCONTACT=$(echo "$info" | grep $OID_SYSCONTACT | sed 's/.* = //g' | sed 's/"//g')
				SYSNAME=$(echo "$info" | grep $OID_SYSNAME | sed 's/.* = //g' | sed 's/"//g')
				SYSLOCATION=$(echo "$info" | grep $OID_SYSLOCATION | sed 's/.* = //g' | sed 's/"//g')

				if [ "$SYSDESCRIPTION" != "" ] ; then
					output="Description - $SYSDESCRIPTION\n"
				fi
				if [ "$SYSUPTIME" != "" ] ; then
					up_time $SYSUPTIME 'Uptime - '
					output=$output"\n"
				fi
				if [ "$SYSCONTACT" != "" ] ; then
					output=$output"Contact - $SYSCONTACT\n"
				fi
				if [ "$SYSNAME" != "" ] ; then
					output=$output"Name - $SYSNAME\n"
				fi
				if [ "$SYSLOCATION" != "" ] ; then
					output=$output"Location - $SYSLOCATION"
				fi
				if [ "$output" == "" ] ; then
					output="No information returned"
					intReturn=$STATE_WARNING
				fi
			fi
		;;

		ports)
			if [ "$ports" == "" ] ; then
				output="Please define number of ports";
				intReturn=$STATE_UNKNOWN;
			else
				ERRMSG=""
				PORTSTATUSA[0]=`snmpget $SNMPArgs $OID_SYSUPTIME`
				if [ "$?" != "0" ] ; then
					ERRMSG="CRITICAL - Problem with SNMP request, check user/password/host"
				else
					for i in `seq 1 $ports`;
					do
						PORTSTATUSA[$i]=`snmpget $SNMPArgs $OID_IFOPERSTATUS.$i $OID_IFLASTCHANGE.$i`
						if [ "$?" != "0" ] ; then
							ERRMSG="CRITICAL - Problem with SNMP request for ports $i, check user/password/host"
							break
						fi
					done
				fi
				if [ "$ERRMSG" != "" ] ; then
					output="$ERRMSG"
					intReturn=$STATE_CRITICAL;
				else
					PORTSTATUS=""
					for i in ${!PORTSTATUSA[@]};
					do
						if [ "$i" -gt 0 ] ; then
							NEWLINE=$'\n'
							PORTSTATUS="${PORTSTATUS}${NEWLINE}"
						fi
						PORTSTATUS="$PORTSTATUS ${PORTSTATUSA[$i]}"
					done
					SYSUPTIME=$(echo "$PORTSTATUS" | grep $OID_SYSUPTIME | sed 's/.* = //g' | sed 's/"//g')
					for i in `seq 1 $ports`;
					do
						portStatus[$i]=$(echo "$PORTSTATUS" | grep "$OID_IFOPERSTATUS.$((i)) " | cut -d "=" -f2 | sed 's/^[ \t]*//;s/[ \t]*$//')
						portChange[$i]=$(echo "$PORTSTATUS" | grep "$OID_IFLASTCHANGE.$((i)) " | tr -d '\n' | sed 's/.* = //g' | sed 's/"//g')
						case ${portStatus[$i]} in
							"1") portText[$i]="Up";			;;
							"2") portText[$i]="Down";		;;
							"3") portText[$i]="Testing";		;;
							"4") portText[$i]="Unknown";		;;
							"5") portText[$i]="Dormant";		;;
							"6") portText[$i]="Not present";	;;
							"7") portText[$i]="Lower layer down";	;;
							"No Such Instance currently exists at this OID") portText[$i]="Not present";   ;;
						esac

						if [ \( "$options" = "" \) -o \( "$options" = "u" -a "${portStatus[$i]}" = "1" \) -o \( "$options" = "d" -a "${portStatus[$i]}" != "1" \) ] ; then
							output=$output"Port $i - ${portText[$i]}\t";
							portUptime=$(sub_time $SYSUPTIME ${portChange[$i]})
							up_time $portUptime '(since ' " ago)\n" "Port $i - ${portText[$i]}\t";
						fi
					done
				fi
			fi
		;;


		port)
			if [ "$port" == "" ] ; then
				output="Please define port to check";
				intReturn=$STATE_UNKNOWN;
			else
				ports=(${port//,/ })
				for port in "${ports[@]}"
				do
				: 
					PORTSTATUS=`snmpget $SNMPArgs $OID_SYSUPTIME $OID_IFOPERSTATUS.$port $OID_IFLASTCHANGE.$port`
					if [ "$?" != "0" ] ; then
						output="CRITICAL - Problem with SNMP request, check user/password/host"
						intReturn=$STATE_CRITICAL;
					else
						portStatus=$(echo "$PORTSTATUS" | grep "$OID_IFOPERSTATUS.$((port)) " | cut -d "=" -f2 | sed 's/^[ \t]*//;s/[ \t]*$//')
						portChange=$(echo "$PORTSTATUS" | grep "$OID_IFLASTCHANGE.$((port)) " | tr -d '\n' | sed 's/.* = //g' | sed 's/"//g')
						SYSUPTIME=$(echo "$PORTSTATUS" | grep $OID_SYSUPTIME | sed 's/.* = //g' | sed 's/"//g')
						case $portStatus in
							"1") portText="Up";			thisReturn=$STATE_OK;;
							"2") portText="Down";			thisReturn=$STATE_CRITICAL;;
							"3") portText="Testing";		thisReturn=$STATE_WARNING;;
							"4") portText="Unknown";		thisReturn=$STATE_UNKNOWN;;
							"5") portText="Dormant";		thisReturn=$STATE_CRITICAL;;
							"6") portText="Not present";		thisReturn=$STATE_CRITICAL;;
							"7") portText="Lower layer down";	thisReturn=$STATE_CRITICAL;;
						esac

						if [ $intReturn -lt $thisReturn ] ; then
							intReturn=$thisReturn
						fi

						output=$output"Port $port - $portText\t";
						portUptime=$(sub_time $SYSUPTIME $portChange)
						up_time $portUptime '(since ' " ago)\n";
					fi
				done	

			fi
		;;

		uptime)
			SYSUPTIME=`snmpget $SNMPArgs $OID_SYSUPTIME | sed 's/.* = //g' | sed 's/"//g'`
			if [ "$?" != "0" ] ; then
				output="CRITICAL - Problem with SNMP request, check user/password/host";
				intReturn=$STATE_CRITICAL;
			else
				up_time $SYSUPTIME 'Uptime - '
			fi
		;;

		*)
			usage; exit 0
		;;
	esac

	echo -e $output
	exit $intReturn
fi
